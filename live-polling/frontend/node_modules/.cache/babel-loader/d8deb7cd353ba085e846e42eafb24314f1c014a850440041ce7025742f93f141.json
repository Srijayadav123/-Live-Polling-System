{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Shivani\\\\Downloads\\\\live-polling\\\\frontend\\\\src\\\\pages\\\\TeacherDashboard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport CreatePollForm from \"../components/CreatePollForm\";\nimport ResultsChart from \"../components/ResultsChart\";\nimport { io } from \"socket.io-client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io(\"http://localhost:5000\");\nexport default function TeacherDashboard() {\n  _s();\n  const [poll, setPoll] = useState(null);\n  const [addQuestion, setAddQuestion] = useState(false);\n  const [results, setResults] = useState([]);\n  useEffect(() => {\n    socket.on(\"newPoll\", data => {\n      setPoll(data);\n      setResults(data.options);\n    });\n    socket.on(\"pollResults\", data => setResults(data));\n    return () => {\n      socket.off(\"newPoll\");\n      socket.off(\"pollResults\");\n    };\n  }, []);\n  const handleCreatePoll = async pollData => {\n    try {\n      const res = await fetch(\"http://localhost:5000/polls\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(pollData)\n      });\n      if (!res.ok) throw new Error(\"Failed to create poll\");\n      const data = await res.json();\n      setPoll(data.poll);\n      setAddQuestion(false);\n    } catch (err) {\n      console.error(err);\n      alert(\"Error creating poll\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Teacher Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setAddQuestion(!addQuestion),\n      children: addQuestion ? \"Hide Question Form\" : \"Add Question\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), addQuestion && /*#__PURE__*/_jsxDEV(CreatePollForm, {\n      onCreate: handleCreatePoll\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 23\n    }, this), poll && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Current Poll:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: poll.question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ResultsChart, {\n        options: results\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n}\n_s(TeacherDashboard, \"l4xh8Ff3OMsR40SZsYCWTkX5i58=\");\n_c = TeacherDashboard;\nvar _c;\n$RefreshReg$(_c, \"TeacherDashboard\");","map":{"version":3,"names":["React","useState","useEffect","CreatePollForm","ResultsChart","io","jsxDEV","_jsxDEV","socket","TeacherDashboard","_s","poll","setPoll","addQuestion","setAddQuestion","results","setResults","on","data","options","off","handleCreatePoll","pollData","res","fetch","method","headers","body","JSON","stringify","ok","Error","json","err","console","error","alert","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onCreate","question","_c","$RefreshReg$"],"sources":["C:/Users/Shivani/Downloads/live-polling/frontend/src/pages/TeacherDashboard.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport CreatePollForm from \"../components/CreatePollForm\";\r\nimport ResultsChart from \"../components/ResultsChart\";\r\nimport { io } from \"socket.io-client\";\r\n\r\nconst socket = io(\"http://localhost:5000\");\r\n\r\nexport default function TeacherDashboard() {\r\n  const [poll, setPoll] = useState(null);\r\n  const [addQuestion, setAddQuestion] = useState(false);\r\n  const [results, setResults] = useState([]);\r\n\r\n  useEffect(() => {\r\n    socket.on(\"newPoll\", (data) => {\r\n      setPoll(data);\r\n      setResults(data.options);\r\n    });\r\n\r\n    socket.on(\"pollResults\", (data) => setResults(data));\r\n\r\n    return () => {\r\n      socket.off(\"newPoll\");\r\n      socket.off(\"pollResults\");\r\n    };\r\n  }, []);\r\n\r\n  const handleCreatePoll = async (pollData) => {\r\n    try {\r\n      const res = await fetch(\"http://localhost:5000/polls\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(pollData),\r\n      });\r\n      if (!res.ok) throw new Error(\"Failed to create poll\");\r\n      const data = await res.json();\r\n      setPoll(data.poll);\r\n      setAddQuestion(false);\r\n    } catch (err) {\r\n      console.error(err);\r\n      alert(\"Error creating poll\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Teacher Dashboard</h1>\r\n      <button onClick={() => setAddQuestion(!addQuestion)}>\r\n        {addQuestion ? \"Hide Question Form\" : \"Add Question\"}\r\n      </button>\r\n\r\n      {addQuestion && <CreatePollForm onCreate={handleCreatePoll} />}\r\n\r\n      {poll && (\r\n        <div>\r\n          <h2>Current Poll:</h2>\r\n          <p>{poll.question}</p>\r\n          <ResultsChart options={results} />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}